package com.dao;

import com.inf.ITables;
import com.inf.IFields;
import com.dao.DCore;

import com.lib.AppConfigs;


public class DSqlAdmin extends DCore implements ITables,IFields
{



   public final String SQL_SELECT_USERS_CHECK_LOGIN  =  SELECT  + COUNT + OPEN + STAR + CLOSE + FROM + TABLE_USERS +
                                                        WHERE + USERS_USERNAME + EQUAL + QUESTION + AND + USERS_PASSWORD + EQUAL + QUESTION;
   //Kiem tra xem old pass co tonnf tai khong
   public final String SQL_SELECT_USERS_CHECKOLD_LOGIN  =  SELECT  + STAR + FROM + TABLE_USERS + WHERE + USERS_USERNAME + EQUAL + QUESTION + AND + USERS_PASSWORD + EQUAL + QUESTION;
   public final String SQL_UPDATE_USERS_USER_NEWPASS  =  UPDATE + TABLE_USERS + SET + USERS_PASSWORD + EQUAL + QUESTION + COMMA + USERS_DATE_PASSWORD + EQUAL + QUESTION + WHERE + USERS_USER_ID + EQUAL + QUESTION;
   public final String SQL_SELECT_USERS_LOGIN  =  SELECT  + STAR + FROM + TABLE_USERS +  WHERE + USERS_USERNAME + EQUAL + QUESTION + AND + USERS_PASSWORD + EQUAL + QUESTION;

   public final String SQL_SELECT_USERS_INFORMATION  =  SELECT  + STAR + FROM + TABLE_USERS +  WHERE + USERS_USERNAME + EQUAL + QUESTION + AND +  USERS_USER_ID + DIFF + QUESTION;
   

   public final String SQL_SELECT_USERS_CHANGEPASS  = SELECT  + STAR + FROM + TABLE_USERS + WHERE + USERS_USERNAME + EQUAL + QUESTION;
   public final String SQL_SELECT_USERS  =  SELECT  + STAR + FROM + TABLE_USERS;
   public final String SQL_SELECT_USERS_TOP1  =  SELECT  +  MAX(USERS_USER_ID) + FROM + TABLE_USERS;
   public final String SQL_SELECT_USERS_BY_ID  =  SELECT  + STAR + FROM + TABLE_USERS + WHERE + USERS_USER_ID + EQUAL + QUESTION + ORDER_BY + USERS_DATE_CREATE;
   public final String SQL_INSERT_USERS_USER  =  INSERT_INTO + TABLE_USERS + FIELDS(USERS_ALL_FIELDS,true) + VALUES(USERS_ALL_FIELDS.length);
   public final String SQL_UPDATE_USERS_USER  =  UPDATE + TABLE_USERS + SET + SETS(USERS_ALL_FIELDS) + WHERE + USERS_USER_ID + EQUAL + QUESTION;
   public final String SQL_UPDATE_USERS_LASTVISIT  =  UPDATE + TABLE_USERS + SET + USERS_DATE_LOGIN + EQUAL + QUESTION +  WHERE + USERS_USER_ID + EQUAL + QUESTION;
   public final String SQL_SELECT_USERS_BY_GROUP_ID  =  SELECT  + STAR + FROM + TABLE_USERS + WHERE + USERS_GROUP_ID + EQUAL + QUESTION;
   public final String SQL_SELECT_USERS_BY_GROUPS_ID  =  SELECT  + DISTINCT + OPEN + TABLE_USERS + STOP + USERS_USER_ID + CLOSE + COMMA + TABLE_USERS + STOP + STAR + FROM + TABLE_USERS + INNER_JOIN + TABLE_GROUP_USER + ON + TABLE_USERS + STOP + USERS_USER_ID + EQUAL + TABLE_GROUP_USER + STOP + GROUP_USER_USER_ID ;
   public final String SQL_SELECT_USERS_BY_DEPARTMENT_ID  =  SELECT  + STAR + FROM + TABLE_USERS + WHERE + TRUE;
   public final String SQL_UPDATE_USERS_ACTIVE  =  UPDATE + TABLE_USERS + SET +  USERS_ACTIVE + EQUAL + QUESTION +  WHERE + USERS_USER_ID + EQUAL + QUESTION;
   public final String SQL_UPDATE_USERS_LOCK  =  UPDATE + TABLE_USERS + SET + USERS_ACTIVE + EQUAL + QUESTION +  WHERE + USERS_USERNAME + EQUAL + QUESTION;
   public final String SQL_ADDNEW_GROUP_USER           = INSERT_INTO + TABLE_GROUP_USER + FIELDS(GROUP_USER_ALL_FIELDS,true) + VALUES(GROUP_USER_ALL_FIELDS.length);


    public final String SQL_SELECT_GROUPS  = SELECT  + STAR + FROM + TABLE_GROUPS;
    public final String SQL_SELECT_GROUPS_BY_ID  =  SELECT  + STAR + FROM + TABLE_GROUPS + WHERE + GROUPS_GROUP_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_GROUPS_BY_PARENT_ID  =  SELECT  + STAR + FROM + TABLE_GROUPS + WHERE + GROUPS_PARENT_ID + EQUAL + QUESTION;
    public final String SQL_INSERT_GROUPS_GROUP  =  INSERT_INTO + TABLE_GROUPS + FIELDS(GROUPS_ALL_FIELDS,true) + VALUES(GROUPS_ALL_FIELDS.length);
    public final String SQL_UPDATE_GROUPS_GROUP  =  UPDATE + TABLE_GROUPS + SET + SETS(GROUPS_ALL_FIELDS) + WHERE + GROUPS_GROUP_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_GROUPS_INFORMATION  =  SELECT  + STAR + FROM + TABLE_GROUPS +  WHERE + GROUPS_CODE + EQUAL + QUESTION + AND + GROUPS_GROUP_ID + DIFF + QUESTION;
    public final String SQL_SELECT_GROUPS_HAVECHILD  =  SELECT  + STAR + FROM + TABLE_GROUPS +  WHERE + GROUPS_PARENT_ID + EQUAL + QUESTION;
    
    public final String SQL_SELECT_GROUP_USER_BY_ID  =  SELECT  + STAR + FROM + TABLE_GROUP_USER + WHERE + GROUP_USER_USER_ID + EQUAL + QUESTION + AND + GROUP_USER_GROUP_ID + EQUAL + QUESTION;
    
    
 
    
    public final String SQL_SELECT_GROUPS_TREE  =  SELECT + FIELDS("A",new String[]{GROUPS_GROUP_ID ,GROUPS_NAME,GROUPS_PARENT_ID }) + COMMA + 
                                                            FIELDS("B",new String[]{GROUPS_GROUP_ID ,GROUPS_NAME,GROUPS_PARENT_ID }) + 
                                                            FROM + TABLE_GROUPS + " A" + LEFT_OUTER_JOIN + TABLE_GROUPS + " B" + 
                                                            ON + "B." + GROUPS_PARENT_ID + EQUAL + "A." + GROUPS_GROUP_ID +
                                                            ORDER_BY + "A." + GROUPS_PARENT_ID + COMMA +"A." + GROUPS_GROUP_ID;

    

    public final String SQL_SELECT_APPS  = SELECT  + STAR + FROM + TABLE_APPS + ORDER_BY + APPS_ORDERBY + ASC;
    public final String SQL_SELECT_APPS_MAX  = SELECT  + APPS_APP_ID + FROM + TABLE_APPS + ORDER_BY + APPS_ORDERBY + DESC;
    public final String SQL_SELECT_APPS_NONE_BLOCK  = SELECT  + STAR + FROM + TABLE_APPS + WHERE + APPS_BLOCK + ">0" + ORDER_BY + APPS_ORDERBY + ASC;
    public final String SQL_SELECT_APPS_BY_ID  =  SELECT  + STAR + FROM + TABLE_APPS + WHERE + APPS_APP_ID + EQUAL + QUESTION;
   
    public final String SQL_INSERT_APPS_APP  =  INSERT_INTO + TABLE_APPS + OPEN + FIELDS(APPS_ALL_FIELDS) + COMMA + APPS_ORDERBY + CLOSE + VALUES + OPEN + PARAMS(APPS_ALL_FIELDS.length,false) + COMMA + QUESTION + CLOSE;
    public final String SQL_UPDATE_APPS_APP  =  UPDATE + TABLE_APPS + SET + SETS(APPS_ALL_FIELDS) + WHERE + APPS_APP_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_APPS_INFORMATION  =  SELECT  + STAR + FROM + TABLE_APPS +  WHERE + APPS_CODE + EQUAL + QUESTION + AND + APPS_APP_ID + DIFF + QUESTION;
    public final String SQL_UPDATE_APPS_SWAP = UPDATE + TABLE_APPS + SET + APPS_ORDERBY + EQUAL + OPEN + SELECT + APPS_ORDERBY + FROM + TABLE_APPS + WHERE + APPS_APP_ID + EQUAL + QUESTION + CLOSE + WHERE + APPS_APP_ID + EQUAL + QUESTION;
    public final String SQL_UPDATE_APPS_ORDER  =  UPDATE + TABLE_APPS + SET + APPS_ORDERBY + EQUAL + QUESTION + WHERE + APPS_APP_ID + EQUAL + QUESTION;
   
   
    public final String SQL_SELECT_DEPARTMENTS  =  SELECT + FIELDS("A",new String[]{DEPARTMENTS_DEPARTMENT_ID ,DEPARTMENTS_NAME,DEPARTMENTS_PARENT_ID }) + COMMA + 
                                                            FIELDS("B",new String[]{DEPARTMENTS_DEPARTMENT_ID ,DEPARTMENTS_NAME,DEPARTMENTS_PARENT_ID }) + 
                                                            FROM + TABLE_DEPARTMENTS + " A" + LEFT_OUTER_JOIN + TABLE_DEPARTMENTS + " B" + 
                                                            ON + "B." + DEPARTMENTS_PARENT_ID + EQUAL + "A." + DEPARTMENTS_DEPARTMENT_ID +
                                                            ORDER_BY + "A." + DEPARTMENTS_PARENT_ID + COMMA +"A." + DEPARTMENTS_DEPARTMENT_ID;
    

    public final String SQL_SELECT_DEPARTMENTS_BY_ID  =  SELECT  + STAR + FROM + TABLE_DEPARTMENTS + WHERE + DEPARTMENTS_DEPARTMENT_ID + EQUAL + QUESTION;
    
  
    
//    public final String SQL_SELECT_DEPARTMENTS_ALL_MEMBER  =  SELECT + USERS_USER_ID + COMMA + USERS_DEPARTMENT_ID + FROM + TABLE_USERS + WHERE + USERS_DEPARTMENT_ID + IN + OPEN + SELECT  + DEPARTMENTS_DEPARTMENT_ID + FROM + TABLE_DEPARTMENTS + WHERE + DEPARTMENTS_DEPARTMENT_ID + IN + OPEN + "#" + CLOSE + AND  + USERS_USER_ID + IN + OPEN  + SQL_DOC_RULE_JOIN_WHERE + UNION + SQL_DOC_RULE_JOIN_WHERE_PRI + CLOSE +  CLOSE;
    
//    public final String SQL_SELECT_GRAOUP_ALL_MEMBER  =  SELECT + USERS_USER_ID + COMMA + USERS_GROUP_ID + FROM + TABLE_USERS + WHERE + USERS_GROUP_ID + IN + OPEN + SELECT  + GROUPS_GROUP_ID + FROM + TABLE_GROUPS + WHERE + GROUPS_GROUP_ID + IN + OPEN + "#" + CLOSE + AND  + USERS_USER_ID + IN + OPEN  + SQL_DOC_RULE_JOIN_WHERE + UNION + SQL_DOC_RULE_JOIN_WHERE_PRI + CLOSE + CLOSE;
    
    public final String SQL_INSERT_DEPARTMENTS_DEPARTMENT  =  INSERT_INTO + TABLE_DEPARTMENTS + FIELDS(DEPARTMENTS_ALL_FIELDS,true) + VALUES(DEPARTMENTS_ALL_FIELDS.length);
    public final String SQL_UPDATE_DEPARTMENTS_DEPARTMENT  =  UPDATE + TABLE_DEPARTMENTS + SET + SETS(DEPARTMENTS_ALL_FIELDS) + WHERE + DEPARTMENTS_DEPARTMENT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_DEPARTMENTS_INFORMATION  =  SELECT  + STAR + FROM + TABLE_DEPARTMENTS +  WHERE + DEPARTMENTS_CODE + EQUAL + QUESTION + AND + DEPARTMENTS_DEPARTMENT_ID + DIFF + QUESTION;
    public final String SQL_SELECT_DEPARTMENTS_HAVECHILD  =  SELECT  + STAR + FROM + TABLE_DEPARTMENTS +  WHERE + DEPARTMENTS_PARENT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_DEPARTMENTS_TREE_AREA="SELECT TINH_ID,PARENT_ID,NAME,MAX_USERS FROM DR_AREA_TREE(?)" ;
   //History
    public final String SQL_SELECT_LOGS  = SELECT  + STAR + FROM + TABLE_LOG + ORDER_BY + LOG_DATE_LOG + DESC;
    public final String SQL_ADDNEW_LOG_LOGIN  =  INSERT_INTO + TABLE_LOG + FIELDS(LOG_ALL_FIELDS,true) + VALUES(LOG_ALL_FIELDS.length);
    public final String SQL_DELETE_LOG_LOGIN  =  DELETE + FROM + TABLE_LOG + WHERE + LOG_DATE_LOG + "<" + QUESTION;

    public final String SQL_SELECT_LOGS_USERNAME  = SELECT  + DISTINCT  + LOG_USERNAME + FROM + TABLE_LOG + ORDER_BY + LOG_USERNAME + DESC;
    public final String SQL_SELECT_LOGS_DATELOGIN  = SELECT  + DISTINCT  + LOG_DATE_LOG + FROM + TABLE_LOG + ORDER_BY + LOG_DATE_LOG + DESC;
    public final String SQL_SELECT_LOGS_HOST  = SELECT  + DISTINCT  + LOG_HOST + FROM + TABLE_LOG + ORDER_BY + LOG_HOST + DESC;
    public final String SQL_SELECT_LOGS_RESULT  = SELECT  + DISTINCT  + LOG_RESULT + FROM + TABLE_LOG + ORDER_BY + LOG_RESULT + DESC;
   
    public final String SQL_SEARCH_LOGS  = SELECT  + STAR + FROM + TABLE_LOG + WHERE + TRUE;
    
 
    //report system
     public final String SQL_REPORT_SYSTEM_SELECT_ALL=SELECT + STAR + FROM + TABLE_REPORT_SYSTEM;
     public final String SQL_REPORT_SYSTEM_ADD_NEW = INSERT_INTO + TABLE_REPORT_SYSTEM + FIELDS(REPORT_SYSTEM_ALL_FIELDS,true) + VALUES(REPORT_SYSTEM_ALL_FIELDS.length);
     public final String SQL_REPORT_SYSTEM_UPDATE = UPDATE + TABLE_REPORT_SYSTEM + SET + SETS(REPORT_SYSTEM_ALL_FIELDS) + WHERE + REPORT_SYSTEM_ID + EQUAL + QUESTION;
     public final String SQL_REPORT_SYSTEM_SELECT_BY_ID =SELECT + STAR + FROM + TABLE_REPORT_SYSTEM + WHERE + REPORT_SYSTEM_ID + EQUAL + QUESTION;
}
