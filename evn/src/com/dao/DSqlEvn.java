package com.dao;

import com.inf.ITables;
import com.inf.IFields;
import com.dao.DCore;

import com.inf.IKey;

import com.lib.AppConfigs;


public class DSqlEvn extends DCore implements ITables,IFields
{

   public final String SQL_SELECT_FOREIGN  =" SELECT a.column_name, uc.table_name " +
   "FROM all_cons_columns a" +
   " JOIN all_constraints c ON a.owner = c.owner" +
   " AND a.constraint_name = c.constraint_name" +
   " JOIN all_constraints c_pk ON c.r_owner = c_pk.owner" +
   " AND c.r_constraint_name = c_pk.constraint_name" +
   " join USER_CONS_COLUMNS uc on uc.constraint_name = c.r_constraint_name" +
   " where a.table_name=?";

    public final String SQL_SELECT_REPORTS_BUFFER  = SELECT  + STAR + FROM + TABLE_REPORTS_BUFFER + ORDER_BY + REPORT_BUFFER_FULLNAME + ASC;
    public final String SQL_SELECT_REPORTS_BUFFER_BY_ID  =  SELECT  + STAR + FROM + TABLE_REPORTS_BUFFER + WHERE + REPORT_BUFFER_REPORT_ID + EQUAL + QUESTION;
   
    public final String SQL_INSERT_REPORTS_BUFFER  =  INSERT_INTO + TABLE_REPORTS_BUFFER + OPEN + FIELDS(REPORT_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(REPORT_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_REPORTS_BUFFER  =  UPDATE + TABLE_REPORTS_BUFFER + SET + SETS(REPORT_BUFFER_ALL_FIELDS) + WHERE + REPORT_BUFFER_REPORT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_REPORTS_BUFFER_INFORMATION  =  SELECT  + STAR + FROM + TABLE_REPORTS_BUFFER +  
    WHERE + REPORT_BUFFER_REPORT_CODE + EQUAL + QUESTION + AND + REPORT_BUFFER_REPORT_ID + DIFF + QUESTION;
   
   
    
    public final String SQL_SELECT_REPORTS_NORM_BUFFER  = SELECT  + STAR + FROM + TABLE_REPORTS_NORM_BUFFER + ORDER_BY + REPORT_NORM_BUFFER_NORM_NAME + ASC;
    public final String SQL_SELECT_REPORTS_NORM_BUFFER_BY_ID  =  SELECT  + STAR + FROM + TABLE_REPORTS_NORM_BUFFER + WHERE + REPORT_NORM_BUFFER_NORM_ID + EQUAL + QUESTION;
    public final String SQL_INSERT_REPORTS_NORM_BUFFER  =  INSERT_INTO + TABLE_REPORTS_NORM_BUFFER + OPEN + FIELDS(REPORT_NORM_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(REPORT_NORM_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_REPORTS_NORM_BUFFER  =  UPDATE + TABLE_REPORTS_NORM_BUFFER + SET + SETS(REPORT_NORM_BUFFER_ALL_FIELDS) + WHERE + REPORT_NORM_BUFFER_NORM_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_REPORTS_NORM_BUFFER_INFORMATION  =  SELECT  + STAR + FROM + TABLE_REPORTS_NORM_BUFFER +  
    WHERE + REPORT_NORM_BUFFER_NORM_CODE + EQUAL + QUESTION + AND + REPORT_NORM_BUFFER_NORM_ID + DIFF + QUESTION;

    public final String SQL_SELECT_SOURCE_CONNECT_BUFFER  = SELECT  + STAR + FROM + TABLE_SOURCE_CONNECT_TO_BUFFER + ORDER_BY + SOURCE_CONNECT_TO_BUFFER_FULLNAME + ASC;
    public final String SQL_SELECT_SOURCE_CONNECT_BUFFER_BY_ID  =  SELECT  + STAR + FROM + TABLE_SOURCE_CONNECT_TO_BUFFER + WHERE + SOURCE_CONNECT_TO_BUFFER_SRC_CONNECT_ID + EQUAL + QUESTION;
    public final String SQL_INSERT_SOURCE_CONNECT_BUFFER  =  INSERT_INTO + TABLE_SOURCE_CONNECT_TO_BUFFER + OPEN + FIELDS(SOURCE_CONNECT_TO_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(SOURCE_CONNECT_TO_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_SOURCE_CONNECT_BUFFER  =  UPDATE + TABLE_SOURCE_CONNECT_TO_BUFFER + SET + SETS(SOURCE_CONNECT_TO_BUFFER_ALL_FIELDS) + WHERE + SOURCE_CONNECT_TO_BUFFER_SRC_CONNECT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_SOURCE_CONNECT_BUFFER_INFORMATION  =  SELECT  + STAR + FROM + TABLE_SOURCE_CONNECT_TO_BUFFER +  
    WHERE + SOURCE_CONNECT_TO_BUFFER_SRC_CODE + EQUAL + QUESTION + AND + SOURCE_CONNECT_TO_BUFFER_SRC_CONNECT_ID + DIFF + QUESTION;

    public final String SQL_SELECT_SOURCE_CONNECT_BUFFER_BY_EXITS_TABLE  = "  SELECT a.src_connect_id, a.src_code, a.fullname, a.shortname, a.type,\n" + 
    "         a.description, a.url, a.connection, a.active, a.des_connect_id\n" + 
    "    FROM evn_source_connect_to_buffer a\n" + 
    "    where exists (\n" + 
    "    SELECT b.src_connect_id\n" + 
    "  FROM evn_tables b where  b.name=? and (b.des_connect_id=a.src_connect_id or b.src_connect_id=a.src_connect_id)\n" + 
    "    )\n" + 
    "    order by a.src_connect_id, a.fullname";


    //SQL FOR EVN_ERROR_BUFFER 
    public final String SQL_SELECT_EVN_ERROR_BUFFER  = SELECT  + STAR + FROM + TABLE_EVN_ERROR_BUFFER + ORDER_BY + EVN_ERROR_BUFFER_ID + ASC;
    public final String SQL_SELECT_EVN_ERROR_BUFFER_BY_ID  =  SELECT  + STAR + FROM + TABLE_EVN_ERROR_BUFFER + WHERE + EVN_ERROR_BUFFER_ID + EQUAL + QUESTION;
    public final String SQL_INSERT_EVN_ERROR_BUFFER  =  INSERT_INTO + TABLE_EVN_ERROR_BUFFER + OPEN + FIELDS(EVN_ERROR_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(EVN_ERROR_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_EVN_ERROR_BUFFER  =  UPDATE + TABLE_EVN_ERROR_BUFFER + SET + SETS(EVN_ERROR_BUFFER_ALL_FIELDS) + WHERE + EVN_ERROR_BUFFER_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_EVN_ERROR_BUFFER_INFORMATION  =  SELECT  + STAR + FROM + TABLE_EVN_ERROR_BUFFER +  
    WHERE + EVN_ERROR_BUFFER_CODE + EQUAL + QUESTION + AND + EVN_ERROR_BUFFER_ID + DIFF + QUESTION;
    public final String SQL_SELECT_EVN_ERROR_BUFFER_BY_CODE  =  SELECT  + STAR + FROM + TABLE_EVN_ERROR_BUFFER + WHERE + EVN_ERROR_BUFFER_CODE + EQUAL + QUESTION;

    //SQL FOR EVN_MODULE_BUFFER
    public final String SQL_SELECT_EVN_MODULE_BUFFER  = SELECT  + STAR + FROM + TABLE_EVN_MODULE_BUFFER + ORDER_BY + EVN_MODULE_BUFFER_ID + ASC;
    public final String SQL_SELECT_EVN_MODULE_BUFFER_BY_ID  =  SELECT  + STAR + FROM + TABLE_EVN_MODULE_BUFFER + WHERE + EVN_MODULE_BUFFER_ID + EQUAL + QUESTION;
    public final String SQL_INSERT_EVN_MODULE_BUFFER  =  INSERT_INTO + TABLE_EVN_MODULE_BUFFER + OPEN + FIELDS(EVN_MODULE_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(EVN_MODULE_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_EVN_MODULE_BUFFER  =  UPDATE + TABLE_EVN_MODULE_BUFFER + SET + SETS(EVN_MODULE_BUFFER_ALL_FIELDS) + WHERE + EVN_MODULE_BUFFER_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_EVN_MODULE_BUFFER_INFORMATION  =  SELECT  + STAR + FROM + TABLE_EVN_MODULE_BUFFER +  
    WHERE + EVN_MODULE_BUFFER_CODE + EQUAL + QUESTION + AND + EVN_MODULE_BUFFER_ID + DIFF + QUESTION;

    public final String SQL_SELECT_SOURCE_ACCOUNT_BUFFER  = SELECT  + STAR + FROM + TABLE_SOURCE_ACCOUNT_BUFFER + ORDER_BY + SOURCE_ACCOUNT_BUFFER_FULLNAME + ASC;
    public final String SQL_SELECT_SOURCE_ACCOUNT_BUFFER_BY_ID  =  SELECT  + STAR + FROM + TABLE_SOURCE_ACCOUNT_BUFFER + WHERE + SOURCE_ACCOUNT_BUFFER_ACCOUNT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_SOURCE_ACCOUNT_BUFFER_BY_SRC  =  SELECT  + STAR + FROM + TABLE_SOURCE_ACCOUNT_BUFFER + WHERE + SOURCE_ACCOUNT_BUFFER_SRC_CONNECT_ID + EQUAL + QUESTION;
    public final String SQL_INSERT_SOURCE_ACCOUNT_BUFFER  =  INSERT_INTO + TABLE_SOURCE_ACCOUNT_BUFFER + OPEN + FIELDS(SOURCE_ACCOUNT_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(SOURCE_ACCOUNT_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_SOURCE_ACCOUNT_BUFFER  =  UPDATE + TABLE_SOURCE_ACCOUNT_BUFFER + SET + SETS(SOURCE_ACCOUNT_BUFFER_ALL_FIELDS) + WHERE + SOURCE_ACCOUNT_BUFFER_ACCOUNT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_SOURCE_ACCOUNT_BUFFER_INFORMATION  =  SELECT  + STAR + FROM + TABLE_SOURCE_ACCOUNT_BUFFER +  
    WHERE + SOURCE_ACCOUNT_BUFFER_SHORTNAME + EQUAL + QUESTION + AND + SOURCE_ACCOUNT_BUFFER_ACCOUNT_ID + DIFF + QUESTION;
    public final String SQL_SELECT_SOURCE_ACCOUNT_BUFFER_EXIT_ACCOUNT  =  SELECT  + STAR + FROM + TABLE_SOURCE_ACCOUNT_BUFFER +  
    WHERE + SOURCE_ACCOUNT_BUFFER_SHORTNAME + EQUAL + QUESTION + AND + SOURCE_ACCOUNT_BUFFER_ACCOUNT_PASS + EQUAL + QUESTION;
  
    public final String SQL_TICKET_BUFFER_ADD_NEW = INSERT_INTO + TABLE_TICKET_BUFFER + FIELDS(TICKET_ALL_FIELDS,true) + VALUES(TICKET_ALL_FIELDS.length);
    public final String SQL_SElECT_TICKET_BUFFER_BY_ID = SELECT + STAR + FROM + TABLE_TICKET_BUFFER + WHERE + TICKET_ID + EQUAL + QUESTION;
    public final String SQL_SElECT_TICKET_BUFFER_BY_REPORTCODE = SELECT + STAR + FROM + TABLE_TICKET_BUFFER + WHERE + TICKET_CODE + EQUAL + QUESTION;
    public final String SQL_INSERT_TICKET_BUFFER  =  INSERT_INTO + TABLE_TICKET_BUFFER + OPEN + FIELDS(TICKET_FIELDS_INSERT) + CLOSE + VALUES + OPEN + PARAMS(TICKET_FIELDS_INSERT.length,false) +  CLOSE;
    public final String SQL_SElECT_TICKET_BUFFER_SEQ =SELECT +" BS_BUFFER_TICKET_ID_SQ.nextval " + FROM + DUAL;
    public final String SQL_SELECT_TICKET_BUFFER2  = SELECT  + STAR + FROM + TABLE_TICKET_BUFFER + WHERE + TICKET_ACTIVE+ EQUAL + QUESTION + AND + TICKET_STATUS + EQUAL + "'O'" + AND + " START_TIME<= sysdate and END_TIME+ numtodsinterval("+IKey.getDelay()+", 'MINUTE')>=sysdate "  + ORDER_BY + TICKET_END_TIME + DESC;
    public final String SQL_SELECT_TICKET_BUFFER_ALL  = SELECT  + STAR + FROM + TABLE_TICKET_BUFFER + WHERE + TICKET_ACTIVE+ EQUAL + QUESTION + AND + TICKET_STATUS + EQUAL + "'O'" +AND + " START_TIME<= sysdate and END_TIME+ numtodsinterval("+IKey.getDelay()+", 'MINUTE')>=sysdate " + ORDER_BY + TICKET_START_TIME + DESC;
    public final String SQL_UPDATE_TICKET_BUFFER_RASOAT  = UPDATE  +  TABLE_TICKET_BUFFER + SET+TICKET_ACTIVE+ EQUAL + 0 + COMMA + TICKET_DATA_FILE + EQUAL + QUESTION +COMMA + TICKET_BUFFER_TIME + EQUAL + "sysdate" + WHERE + TICKET_ID+ EQUAL + QUESTION;

    public final String SQL_UPDATE_TICKET_BUFFER_STATUS_BY_INSERT  = UPDATE  +  TABLE_TICKET_BUFFER + SET +TICKET_STATUS+ EQUAL + QUESTION + COMMA + TICKET_ACTIVE + EQUAL + QUESTION+ COMMA + TICKET_WHERES + EQUAL + QUESTION + WHERE + TICKET_ID+ EQUAL + QUESTION;

    public final String SQL_UPDATE_TICKET_BUFFER_WHERE  = UPDATE  +  TABLE_TICKET_BUFFER + SET +TICKET_WHERES+ EQUAL + QUESTION + WHERE + TICKET_ID+ EQUAL + QUESTION;
    public final String SQL_UPDATE_TICKET_BUFFER_ACTIVE  = UPDATE  +  TABLE_TICKET_BUFFER + SET +TICKET_ACTIVE+ EQUAL + QUESTION + WHERE + TICKET_ID+ EQUAL + QUESTION;
    public final String SQL_UPDATE_TICKET_BUFFER_STATUS  = UPDATE  +  TABLE_TICKET_BUFFER + SET +TICKET_STATUS+ EQUAL + QUESTION + WHERE + TICKET_ID+ EQUAL + QUESTION;
    public final String SQL_UPDATE_TICKET_BUFFER  =  UPDATE + TABLE_TICKET_BUFFER + SET + SETS(TICKET_ALL_FIELDS) + WHERE + TICKET_ID + EQUAL + QUESTION;

    public final String SQL_SELECT_TABLES  = SELECT  + STAR + FROM + TABLE_TABLES + ORDER_BY + TABLES_NAME + ASC;
    public final String SQL_SELECT_TABLES_BY_ID  =  SELECT  + STAR + FROM + TABLE_TABLES + WHERE + TABLES_ID + EQUAL + QUESTION;
        public final String SQL_SELECT_TABLES_BY_NAME  =  SELECT  + STAR + FROM + TABLE_TABLES + WHERE + TABLES_NAME + EQUAL + QUESTION + AND + TABLES_SRC_CONNECT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_TABLES_BY_TOP1  =  SELECT  + STAR + FROM + TABLE_TABLES + WHERE + " ROWNUM=1";

    public final String SQL_INSERT_TABLES  =  INSERT_INTO + TABLE_TABLES + OPEN + FIELDS(TABLES_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(TABLES_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_TABLES  =  UPDATE + TABLE_TABLES + SET + SETS(TABLES_ALL_FIELDS) + WHERE + TABLES_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_TABLES_EXIST  =  SELECT  + STAR + FROM + TABLE_TABLES +  
    WHERE + TABLES_NAME + EQUAL + QUESTION + AND + TABLES_SRC_CONNECT_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_TABLES_ISEXIST_NAME  =  SELECT  + STAR + FROM + TABLE_TABLES +  
    WHERE + TABLES_NAME + EQUAL + QUESTION;

    public final String SQL_ALERT_BUFFER_ADD_NEW = INSERT_INTO + TABLE_ALERT_BUFFER + FIELDS(ALERT_BUFFER_ALL_FIELDS,true) + VALUES(ALERT_BUFFER_ALL_FIELDS.length);
    public final String SQL_SElECT_ALERT_BUFFER_BY_ID = SELECT + STAR + FROM + TABLE_ALERT_BUFFER + WHERE + ALERT_BUFFER_ALERT_ID + EQUAL + QUESTION;
    public final String SQL_SElECT_ALERT_BUFFER_TOP = SELECT + STAR + FROM + TABLE_ALERT_BUFFER + ORDER_BY+ ALERT_BUFFER_ALERT_ID + DESC;

    public final String SQL_SElECT_ALERT_BUFFER_BY_STATUS = SELECT + STAR + FROM + TABLE_ALERT_BUFFER + WHERE + ALERT_BUFFER_STATUS + DIFF + QUESTION;
    public final String SQL_INSERT_ALERT_BUFFER  =  INSERT_INTO + TABLE_ALERT_BUFFER + OPEN + FIELDS(ALERT_BUFFER_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(ALERT_BUFFER_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_UPDATE_ALERT_BUFFER_ACTIVE  = UPDATE  +  TABLE_ALERT_BUFFER + SET +ALERT_BUFFER_COMPLETE_STATUS+ EQUAL + QUESTION + COMMA + ALERT_BUFFER_SENT_TIME+ EQUAL+"sysdate"  + WHERE + ALERT_BUFFER_ALERT_ID+ EQUAL + QUESTION;
    public final String SQL_UPDATE_ALERT_BUFFER_ACTIVE_BY_IDTICKET  = UPDATE  +  TABLE_ALERT_BUFFER + SET +ALERT_BUFFER_STATUS+ EQUAL + QUESTION + WHERE + ALERT_BUFFER_TICKET_ID + EQUAL + QUESTION;

    public final String SQL_INSERT_COMMON  =   OPEN +FIELDS(COMMON_ALL_FIELDS) + CLOSE + VALUES + OPEN + PARAMS(COMMON_ALL_FIELDS.length,false) +  CLOSE;
    public final String SQL_SElECT_ALERT_BUFFER_BY_SENTTIME_ISNULL = SELECT + STAR + FROM + TABLE_ALERT_BUFFER + WHERE + ALERT_BUFFER_SENT_TIME + IS_NULL +AND + ALERT_BUFFER_STATUS + IN + " ('E1','E2') " + ORDER_BY + ALERT_BUFFER_DETECT_TIME + DESC;
    public final String SQL_UPDATE_COMMON  =   SET +SETS(COMMON_ALL_FIELDS_UPDATE) +WHERE + COMMON_TICKET_ID + EQUAL + QUESTION;
    public final String SQL_UPDATE_COMMON_RECORD  =   SET +SETS(COMMON_ALL_FIELDS_UPDATE) +WHERE + COMMON_TICKET_ID + EQUAL + QUESTION + AND + COMMON_SRC_RECORD_ID + EQUAL + QUESTION;

}
